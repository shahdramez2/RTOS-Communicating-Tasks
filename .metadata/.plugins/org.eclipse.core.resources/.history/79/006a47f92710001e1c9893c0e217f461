
/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2014 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// ----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "diag/trace.h"

/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "semphr.h"
#include "time.h"

#define CCM_RAM __attribute__((section(".ccmram")))

/*-----------------------------------------------------------*/
// Semihosting STM32F4 empty sample (trace via DEBUG).
//
// Trace support is enabled by adding the TRACE macro definition.
// By default the trace messages are forwarded to the DEBUG output,
// but can be rerouted to any device or completely suppressed, by
// changing the definitions required in system/src/diag/trace-impl.c
// (currently OS_USE_TRACE_ITM, OS_USE_TRACE_SEMIHOSTING_DEBUG/_STDOUT).
//


/*----------------------------------------------------------------Definitions-----------------------------------------------------------------------*/
#define Treceiver                                      100
#define MAX_STIRNG_LENGTH                              20
#define NUM_OF_RUNS                                    6
#define QUEUE_SIZE                                     3
#define NUM_SENDERS                                    3
#define MAX_NUM_OF_RECEIVED_MESSAGES_PER_RUN           1000

/*----------------------------------------------------------------Functions Prototypes-----------------------------------------------------------------------*/
static void prvSenderTimerCallback( TimerHandle_t xTimer );
static void prvReceiverTimerCallback( TimerHandle_t xTimer );

static void senderTask (void* parameters);
static void receiverTask (void* parameters);

static void reset (void);
static void endOfIteration (void);
static uint32_t generateRandomTsender (uint32_t minBound, uint32_t maxBound);

/*----------------------------------------------------------------Global Variables-----------------------------------------------------------------------*/
static QueueHandle_t gQueueHandle = NULL;

static TimerHandle_t xTimerSender[NUM_SENDERS] = {NULL};
static TimerHandle_t xTimerReceiver = NULL;

static TaskHandle_t xSenderHandle[NUM_SENDERS] = {NULL};
static TaskHandle_t xReceiverHandle = NULL;


static BaseType_t xTimerSenderStarted[NUM_SENDERS];
static BaseType_t xTimerReceiverStarted;
static BaseType_t xSender[NUM_SENDERS], xReceiver;

static SemaphoreHandle_t xSemaphoreSender[NUM_SENDERS], xSemaphoreReceiver;

/*Senders Counters */
static uint32_t gNumOfTransmittedMessagesOfSender[NUM_SENDERS]={0};
static uint32_t gNumOfBlockedMessagesOfSender[NUM_SENDERS]={0};

/*receiver counter*/
static uint32_t gNumOfReceivedMessages=0;

/*Randomized Tsender*/
static uint32_t gRandomTsender;

static uint32_t minBoundOfTsender[NUM_OF_RUNS] = {50, 80, 110, 140, 170, 200};
static uint32_t maxBoundOfTsender[NUM_OF_RUNS] = {150, 200, 250, 300, 350, 400};

/* global variable to hold which iteration the program is now running */
static uint8_t gCurrentRunNumber= 0;

static uint32_t gTsenderSumArr[NUM_SENDERS] [NUM_OF_RUNS] ={0};
/*----------------------------------------------------------------main()-----------------------------------------------------------------------*/

// Sample pragmas to cope with warnings. Please note the related line at
// the end of this function, used to pop the compiler diagnostics status.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

int
main(int argc, char* argv[])
{
	srand(time(NULL));

	/*Create Queue */
	gQueueHandle = xQueueCreate(QUEUE_SIZE, sizeof(uint8_t*));

	if(gQueueHandle == NULL)
	{
		printf("The queue was not created successfully\n");
		return 1;
	}else{
		//printf("Queue was created successfully\n");
	}

	/*Create sender tasks*/
	char taskName[20];
	for(int i=0; i<NUM_SENDERS; i++)
	{
		if(i!=2)
		{
			/*Create 2 sender tasks with low priority of 1 */
			snprintf(taskName, MAX_STIRNG_LENGTH , "senderTask%d", i+1);
			xSender[i]=  xTaskCreate (senderTask, taskName, 1024, (void*) i, 1, &xSenderHandle[i]);
		}else{
			/*Create third task with higher priority*/
			xSender[i]=  xTaskCreate (senderTask, taskName, 1024, (void*) i, 2, &xSenderHandle[i]);
		}

		if(xSender[i] == pdFAIL)
		{
			printf("There was a problem in creating senderTasK %d\n",i);
			return 1;
		}
	}

	/*Create receiver task*/
	xReceiver= xTaskCreate (receiverTask, "Receiver Task",1024, NULL, 3, &xReceiverHandle);
	if(xReceiver == pdFAIL)
	{
		printf("There was a problem in creating receiver task\n");
		return 1;
	}

	/*Create sender semphores */
	for (int i = 0; i < NUM_SENDERS; i++) {
		xSemaphoreSender[i] = xSemaphoreCreateBinary();
		if (xSemaphoreSender[i] == NULL) {
			printf("Error creating senderSemaphore %d\n", i);
		}
	}

	/*Create receiver semaphore*/
	xSemaphoreReceiver = xSemaphoreCreateBinary();
	if (xSemaphoreReceiver == NULL)
	{
		printf("There was a problem in creating receiver semphore\n");
		return 1;
	}

	/*Create sender Timers*/
	char timerName[20];
	for(int i=0; i< NUM_SENDERS; i++)
	{
		snprintf(timerName, MAX_STIRNG_LENGTH , "TimerOfSender%d", i+1);
		gRandomTsender= generateRandomTsender(minBoundOfTsender[gCurrentRunNumber], maxBoundOfTsender[gCurrentRunNumber]);
		xTimerSender[i]  = xTimerCreate(timerName, pdMS_TO_TICKS( gRandomTsender) , pdTRUE, ( void * ) (i+1), prvSenderTimerCallback);

		if(xTimerSender[i] != NULL)
		{
			xTimerSenderStarted[i] = xTimerStart (xTimerSender[i], 0);
			if(xTimerSenderStarted[i] != pdPASS)
			{
				printf("There was a problem in setting senderTimer %d into the active state\n",i);
				return 1;
			}
		}else {
			printf("There was a problem in creating senderTimer %d\n", i);
			return 1;
		}
	}

	/*Create receiver timer*/
	xTimerReceiver = xTimerCreate("TimerOfReceiver", pdMS_TO_TICKS(Treceiver), pdTRUE, ( void * ) 4, prvReceiverTimerCallback);
	if(xTimerReceiver !=NULL)
	{
		xTimerReceiverStarted = xTimerStart (xTimerReceiver, 0);
		if(xTimerReceiverStarted != pdPASS)
		{
			printf("There was a problem in setting receiverTimer into the active state\n");
			return 1;
		}
	}else {
		printf("There was a problem in creating receiver timer\n");
		return 1;
	}

	printf("Starting the scheduler now\n\n");
	vTaskStartScheduler();
	return 0;
}

#pragma GCC diagnostic pop

/*----------------------------------------------------------------Functions and Tasks Implementation-----------------------------------------------------------------------*/
void senderTask (void* senderTaskID)
{
	int ID = (int)senderTaskID;
	TickType_t currentTime;
	printf("ID=%d\n", ID);

	char* sendMsgArray[NUM_SENDERS];

	for (int i = 0; i < NUM_SENDERS; i++) {
		sendMsgArray[i] = (char*)pvPortMalloc(MAX_STIRNG_LENGTH * sizeof(char));
		if (sendMsgArray[i] == NULL) {
			printf("Error allocating memory for message of task %d", ID);
		}
	}

	char* sendMsg = (char*)pvPortMalloc(MAX_STIRNG_LENGTH * sizeof(char));

	for( ;; )
	{
		if (xSemaphoreTake(xSemaphoreSender[ID], portMAX_DELAY) == pdTRUE)
		{
			currentTime = xTaskGetTickCount();
			snprintf(sendMsg[ID], MAX_STIRNG_LENGTH , "Time is %lu", currentTime);

			if (xQueueSend(gQueueHandle, (void*) &sendMsg[ID], ( TickType_t ) 0) == pdTRUE)

				++gNumOfTransmittedMessagesOfSender[ID];
			else
				++gNumOfBlockedMessagesOfSender[ID];

			gRandomTsender= generateRandomTsender(minBoundOfTsender[gCurrentRunNumber], maxBoundOfTsender[gCurrentRunNumber]);
			gTsenderSumArr[ID][gCurrentRunNumber]+= gRandomTsender;

			if(xTimerChangePeriod (xTimerSender[ID], pdMS_TO_TICKS ( gRandomTsender ), 0) != pdPASS)
				printf("Changing period of senderTimer %d  was not successful\n", ID);
		}
	}
}
void receiverTask (void* parameters)
{
	char* receivedMessage;

	for( ;; )
	{
		//printf("Receiver before sem\n\n");
		if (xSemaphoreTake(xSemaphoreReceiver, portMAX_DELAY) == pdTRUE)
		{
			//printf("Receiver after sem\n\n");
			if (xQueueReceive(gQueueHandle, (void*) &receivedMessage, ( TickType_t ) 0) == pdTRUE)
			{
				//printf("The message received is : %s\n", receivedMessage);

				++gNumOfReceivedMessages;
				printf("The message received is : %s\n\n", receivedMessage);

				if(gNumOfReceivedMessages == MAX_NUM_OF_RECEIVED_MESSAGES_PER_RUN)
				{
					endOfIteration();
					reset();
				}

			}else{
				//printf("No message is received\n");
			}
		}
	}
}

static void prvSenderTimerCallback( TimerHandle_t xTimer )
{
	for(int i=0; i<NUM_SENDERS; i++)
	{
		if(xTimer == xTimerSender[i])
		{
			xSemaphoreGiveFromISR(xSemaphoreSender[i], NULL);
		}
	}
}

static void prvReceiverTimerCallback( TimerHandle_t xTimer )
{
	xSemaphoreGiveFromISR(xSemaphoreReceiver,NULL);
}

#if 0
static void endOfIteration (void)
{
	uint32_t totalTranmittedMsgs = gNumOfTransmittedMessagesOfSender[0] + gNumOfTransmittedMessagesOfSender[1] + gNumOfTransmittedMessagesOfSender[2];
	uint32_t totalBlockedMsgs = gNumOfBlockedMessagesOfSender[0] + gNumOfBlockedMessagesOfSender[1] + gNumOfBlockedMessagesOfSender[2];
	uint32_t totalSentMsgs = totalTranmittedMsgs + totalBlockedMsgs;


	uint32_t totalSentMsgs1= gNumOfTransmittedMessagesOfSender[0] + gNumOfBlockedMessagesOfSender[0];
	uint32_t totalSentMsgs2= gNumOfTransmittedMessagesOfSender[1] + gNumOfBlockedMessagesOfSender[1];
	uint32_t totalSentMsgs3= gNumOfTransmittedMessagesOfSender[2] + gNumOfBlockedMessagesOfSender[2];

	/*double*/ uint32_t avgTsender1= /*(double)*/ gTsenderSumArr[0][gCurrentRunNumber]/  totalSentMsgs1;
	uint32_t avgTsender2= (double) gTsenderSumArr[1][gCurrentRunNumber]/  totalSentMsgs2;
	uint32_t avgTsender3= (double) gTsenderSumArr[2][gCurrentRunNumber]/  totalSentMsgs3;
	uint32_t totlAvgTsender=  (double)( gTsenderSumArr[0][gCurrentRunNumber] +  gTsenderSumArr[1][gCurrentRunNumber] +  gTsenderSumArr[2][gCurrentRunNumber])/  totalSentMsgs;
	/*double x=5.066;
uint32_t xint1=x;
uint32_t xint2;
uint32_t xint3;
if (x-xint1<.1){xint2=0;
xint3
}*/


	//uint32_t xint2=(x-xint1)*100;
	//printf("x= %lu.%lu%",xint1,xint2);


	printf("\n\nThe statistics of Run number %d is\nThe total number of transmitted messages is: %lu \nThe total number of blocked messages is: %lu\nThe total number of sent messages is: %lu\n\n",
			gCurrentRunNumber+1, totalTranmittedMsgs, totalBlockedMsgs, totalSentMsgs);

	printf("The statistics of Sender (1) (Low priority task) is: \nThe number of transmitted messages is %lu \nThe number of blocked messages is %lu\nThe number of sent messages is %lu\n\n",
			gNumOfTransmittedMessagesOfSender[0], gNumOfBlockedMessagesOfSender[0], totalSentMsgs1 );

	printf("The statistics of Sender (2) (Low priority task) is: \nThe number of transmitted messages is %lu \nThe number of blocked messages is %lu \nThe number of sent messages is %lu\n\n",
			gNumOfTransmittedMessagesOfSender[1], gNumOfBlockedMessagesOfSender[1], totalSentMsgs2);

	printf("The statistics of Sender (3) (High priority task) is: \nThe number of transmitted messages is %lu \nThe number of blocked messages is %lu \nThe number of sent messages is %lu\n\n",
			gNumOfTransmittedMessagesOfSender[2], gNumOfBlockedMessagesOfSender[2], totalSentMsgs3);

	printf("Tsender avgs are as follows: \n");
	printf("The avg of Tsender of senderTask (1) of run# %d is: %lu\n", gCurrentRunNumber+1 , avgTsender1 );
	printf("The avg of Tsender of senderTask (2) of run# %d is: %lu\n", gCurrentRunNumber+1 , avgTsender2 );
	printf("The avg of Tsender of senderTask (3) of run# %d is: %lu\n", gCurrentRunNumber+1 , avgTsender3 );
	printf("The avg of total Tsender of of run# %d is: %lu\n", gCurrentRunNumber+1 ,  totlAvgTsender);

	printf("Tsender Summations are as follows: \n");
	printf("The avg of Tsender of senderTask (1) of run# %d is: %lu\n", gCurrentRunNumber+1 , gTsenderSumArr[0][gCurrentRunNumber] );
	printf("The avg of Tsender of senderTask (2) of run# %d is: %lu\n", gCurrentRunNumber+1 , gTsenderSumArr[1][gCurrentRunNumber] );
	printf("The avg of Tsender of senderTask (3) of run# %d is: %lu\n", gCurrentRunNumber+1 , gTsenderSumArr[2][gCurrentRunNumber] );
	printf("The avg of total Tsender of of run# %d is: %lu\n", gCurrentRunNumber+1 ,   (gTsenderSumArr[0][gCurrentRunNumber] +  gTsenderSumArr[1][gCurrentRunNumber] +  gTsenderSumArr[2][gCurrentRunNumber]) );



	printf("******************************************************************\n");

	/*increment the current gCurrentRunNumber to go to the next iteration*/
	++gCurrentRunNumber;

	/*Exit the program if all iterations are done*/
	if(gCurrentRunNumber == NUM_OF_RUNS)
	{
		/*Destroy all timers */
		if(xTimerDelete(xTimerSender[0],0) == pdPASS && xTimerDelete(xTimerSender[1],0) == pdPASS && xTimerDelete(xTimerSender[2],0) == pdPASS && xTimerDelete(xTimerReceiver,0) == pdPASS )
		{
			/*All timers were destroyed successfully*/
		}else {
			printf("There was a problem deleting timers\n");
		}

		printf("Game Over\n");

#if 0
		vTaskDelete(xReceiverHandle);
		vTaskDelete(xSender1Handle);
		vTaskDelete(xSender2Handle);
		vTaskDelete(xSender3Handle);
		//vTaskEndScheduler();
#endif
		exit(0);
	}

}
#endif

static void endOfIteration (void)
{
	int i;
	uint32_t totalTranmittedMsgs=0 ,totalBlockedMsgs=0, totalSentMsgs;
	uint32_t SentMsgsPerTask[NUM_SENDERS];
	uint32_t avgTsenderPerTask[NUM_SENDERS];
	uint32_t totalAvgTsender=0;


	for(i=0; i<NUM_SENDERS; i++)
	{
		totalTranmittedMsgs += gNumOfTransmittedMessagesOfSender[i];
		totalBlockedMsgs    += gNumOfBlockedMessagesOfSender[i];
		SentMsgsPerTask [i] = gNumOfTransmittedMessagesOfSender[i] + gNumOfBlockedMessagesOfSender[i];
		avgTsenderPerTask[i]= gTsenderSumArr[i][gCurrentRunNumber]/  SentMsgsPerTask[i];

		totalAvgTsender += gTsenderSumArr[i][gCurrentRunNumber];
	}

	totalSentMsgs = totalTranmittedMsgs + totalBlockedMsgs;
	//totalAvgTsender= totalAvgTsender/ totalSentMsgs;


	printf("\n\nThe statistics of Run number %d is\nThe total number of transmitted messages is: %lu \nThe total number of blocked messages is: %lu\nThe total number of sent messages is: %lu\n\n",
			gCurrentRunNumber+1, totalTranmittedMsgs, totalBlockedMsgs, totalSentMsgs);

	for (int i=0; i<NUM_SENDERS; i++)
	{
		if(i != 2)
		{
			printf("The statistics of Sender (%d) (Low priority task) is: \nThe number of transmitted messages is %lu \nThe number of blocked messages is %lu\nThe number of sent messages is %lu\n\n",
					i, gNumOfTransmittedMessagesOfSender[i], gNumOfBlockedMessagesOfSender[i], SentMsgsPerTask[i] );

		}else
		{
			printf("The statistics of Sender (%d) (High priority task) is: \nThe number of transmitted messages is %lu \nThe number of blocked messages is %lu\nThe number of sent messages is %lu\n\n",
					i, gNumOfTransmittedMessagesOfSender[i], gNumOfBlockedMessagesOfSender[i], SentMsgsPerTask[i] );
		}
	}

	for(int i=0; i<NUM_SENDERS; i++)
	{
		printf("The summation of Tsender of senderTask (%d) of run# %d is: %lu\n", i, gCurrentRunNumber+1 , gTsenderSumArr[i][gCurrentRunNumber]);
		printf("The avg of Tsender of senderTask (%d) of run# %d is: %lu\n\n", i, gCurrentRunNumber+1 , avgTsenderPerTask[i] );
	}

	printf("The total avgTsender is%lu",totalAvgTsender);
	printf("******************************************************************\n");

	/*increment the current gCurrentRunNumber to go to the next iteration*/
	++gCurrentRunNumber;

	/*Exit the program if all iterations are done*/
	if(gCurrentRunNumber == NUM_OF_RUNS)
	{
		/*Destroy all timers */
		if(xTimerDelete(xTimerSender[0],0) == pdPASS && xTimerDelete(xTimerSender[1],0) == pdPASS && xTimerDelete(xTimerSender[2],0) == pdPASS && xTimerDelete(xTimerReceiver,0) == pdPASS )
		{
			/*All timers were destroyed successfully*/
		}else {
			printf("There was a problem deleting timers\n");
		}

		printf("Game Over\n");
		exit(0);
	}else{
		/*Configure Tsender for all timers*/
		for(i=0; i<NUM_SENDERS; i++)
		{
			gRandomTsender= generateRandomTsender(minBoundOfTsender[gCurrentRunNumber], maxBoundOfTsender[gCurrentRunNumber] );
			xTimerChangePeriod (xTimerSender[i], pdMS_TO_TICKS ( gRandomTsender ), 0);
			gTsenderSumArr[i][gCurrentRunNumber]+= gRandomTsender;
		}
	}

	/*double x=5.066;
	uint32_t xint1=x;
	uint32_t xint2;
	uint32_t xint3;
	if (x-xint1<.1){xint2=0;
	xint3
	}*/


	//uint32_t xint2=(x-xint1)*100;
	//printf("x= %lu.%lu%",xint1,xint2);
}


static void reset (void)
{
	printf("Implementing reset function\n");

	/*Clear Counters*/

	for(int i=0; i<NUM_SENDERS; i++){
		gNumOfTransmittedMessagesOfSender[i]=0;
		gNumOfBlockedMessagesOfSender[i]=0;
	}
	gNumOfReceivedMessages=0;

	/*Clear the queue */
	xQueueReset(gQueueHandle);
}

static uint32_t generateRandomTsender (uint32_t minBound, uint32_t maxBound) {
	uint32_t range = maxBound - minBound + 1;
	uint32_t scaledRandom = (uint32_t)(((double)rand() / (double)RAND_MAX) * range);
	return scaledRandom + minBound;
}



/*-----------------------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void )
{
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();

	if( xFreeStackSpace > 100 )
	{
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}

void vApplicationTickHook(void) {
}

StaticTask_t xIdleTaskTCB CCM_RAM;
StackType_t uxIdleTaskStack[configMINIMAL_STACK_SIZE] CCM_RAM;

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
}

static StaticTask_t xTimerTaskTCB CCM_RAM;
static StackType_t uxTimerTaskStack[configTIMER_TASK_STACK_DEPTH] CCM_RAM;

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
}




